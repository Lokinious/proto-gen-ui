import { toProtoPackageName } from './protoNaming';

export interface CompilationInstructions {
  java: {
    dependencies: string[];
    compileCommand: string;
    exampleUsage: string;
  };
  go: {
    dependencies: string[];
    compileCommand: string;
    exampleUsage: string;
  };
}

export function generateCompilationInstructions(dataProductName: string): CompilationInstructions {
  const protoPackageName = toProtoPackageName(dataProductName);
  const protoFileName = `${protoPackageName}.proto`;
  
  return {
    java: {
      dependencies: [
        'com.google.protobuf:protobuf-java:3.25.1',
        'com.google.protobuf:protobuf-java-util:3.25.1'
      ],
      compileCommand: `protoc --java_out=src/main/java ${protoFileName}`,
      exampleUsage: `
// Maven dependency
<dependency>
    <groupId>com.google.protobuf</groupId>
    <artifactId>protobuf-java</artifactId>
    <version>3.25.1</version>
</dependency>

// Gradle dependency
implementation 'com.google.protobuf:protobuf-java:3.25.1'

// Compilation
protoc --java_out=src/main/java ${protoFileName}

// Usage example
import com.${protoPackageName.replace(/_/g, '.')}.*;

// Create a new message
YourMessage message = YourMessage.newBuilder()
    .setFieldName("value")
    .build();

// Serialize to bytes
byte[] data = message.toByteArray();

// Deserialize from bytes
YourMessage parsed = YourMessage.parseFrom(data);`
    },
    go: {
      dependencies: [
        'google.golang.org/protobuf/proto',
        'google.golang.org/protobuf/types/known/timestamppb'
      ],
      compileCommand: `protoc --go_out=. --go_opt=paths=source_relative ${protoFileName}`,
      exampleUsage: `
// Install dependencies
go get google.golang.org/protobuf/proto
go get google.golang.org/protobuf/types/known/timestamppb

// Compilation
protoc --go_out=. --go_opt=paths=source_relative ${protoFileName}

// Usage example
package main

import (
    "google.golang.org/protobuf/proto"
    "${protoPackageName}" // Import your generated package
)

func main() {
    // Create a new message
    message := &${protoPackageName}.YourMessage{
        FieldName: "value",
    }
    
    // Serialize to bytes
    data, err := proto.Marshal(message)
    if err != nil {
        // handle error
    }
    
    // Deserialize from bytes
    parsed := &${protoPackageName}.YourMessage{}
    err = proto.Unmarshal(data, parsed)
    if err != nil {
        // handle error
    }
}`
    }
  };
}

export function generateReadmeContent(dataProductName: string, instructions: CompilationInstructions): string {
  const protoPackageName = toProtoPackageName(dataProductName);
  const protoFileName = `${protoPackageName}.proto`;
  
  return `# ${dataProductName} Protocol Buffers

Generated Protocol Buffer definitions for ${dataProductName}.

## Files
- \`${protoFileName}\` - Protocol Buffer definitions

## Compilation Instructions

### For Java

#### Dependencies (Maven)
\`\`\`xml
${instructions.java.dependencies.map(dep => {
  const [group, artifact, version] = dep.split(':');
  return `<dependency>
    <groupId>${group}</groupId>
    <artifactId>${artifact}</artifactId>
    <version>${version}</version>
</dependency>`;
}).join('\n')}
\`\`\`

#### Dependencies (Gradle)
\`\`\`gradle
${instructions.java.dependencies.map(dep => `implementation '${dep}'`).join('\n')}
\`\`\`

#### Compilation
\`\`\`bash
${instructions.java.compileCommand}
\`\`\`

#### Usage Example
\`\`\`java${instructions.java.exampleUsage}
\`\`\`

### For Go

#### Dependencies
\`\`\`bash
${instructions.go.dependencies.map(dep => `go get ${dep}`).join('\n')}
\`\`\`

#### Compilation
\`\`\`bash
${instructions.go.compileCommand}
\`\`\`

#### Usage Example
\`\`\`go${instructions.go.exampleUsage}
\`\`\`

## Generated Package Information

- **Package Name**: \`${protoPackageName}\`
- **Java Package**: \`com.${protoPackageName.replace(/_/g, '.')}\`
- **Go Package**: \`./${protoPackageName};${protoPackageName}\`

## Notes

- All timestamp fields use ISO 8601 format strings
- UUID fields are represented as strings
- BigDecimal fields are represented as strings
- Binary data uses the \`bytes\` type
- All field names follow snake_case convention
- All message names follow PascalCase convention

## Protobuf Compiler Installation

If you don't have the Protocol Buffer compiler installed:

### macOS
\`\`\`bash
brew install protobuf
\`\`\`

### Ubuntu/Debian
\`\`\`bash
apt-get install protobuf-compiler
\`\`\`

### Windows
Download from: https://github.com/protocolbuffers/protobuf/releases

## Support

This proto file was generated by Proto Gen UI and includes language-specific optimizations for both Java and Go development.
`;
}
